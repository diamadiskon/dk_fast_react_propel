{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.19.5.34762",
      "templateHash": "5098125239681120871"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Azure region used for the deployment of all resources"
      }
    },
    "location_abbreviation": {
      "type": "string",
      "metadata": {
        "description": "Abbreviation fo the location"
      }
    },
    "workload": {
      "type": "string",
      "metadata": {
        "description": "Name of the workload that will be deployed"
      }
    },
    "environment": {
      "type": "string",
      "metadata": {
        "description": "Name of the workloads environment"
      }
    },
    "rg_tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags to be applied on the resource group"
      }
    },
    "jumpbox_admin_username": {
      "type": "string",
      "metadata": {
        "description": "Username of the jumpbox admin"
      }
    },
    "jumpbox_admin_password": {
      "type": "securestring",
      "metadata": {
        "description": "Password of the jumpbox admin"
      }
    },
    "cosmosdb_admin_username": {
      "type": "string",
      "metadata": {
        "description": "Username of the mysql admin"
      }
    },
    "cosmosdb_admin_password": {
      "type": "securestring",
      "metadata": {
        "description": "Password of the cosmosdb admin"
      }
    },
    "azurePAT": {
      "type": "securestring",
      "metadata": {
        "description": "PAT azure devops"
      }
    },
    "AzureDevOpsURL": {
      "type": "string",
      "metadata": {
        "description": "Azure DevOps Organization URL"
      }
    },
    "AgentPoolName": {
      "type": "string",
      "metadata": {
        "description": "Self hosted pool name"
      }
    },
    "cosmosdb_admin_password_secret_name": {
      "type": "string",
      "metadata": {
        "description": "Name of the secret that will store the mysql admin password"
      }
    },
    "jumpbox_admin_password_secret_name": {
      "type": "string",
      "metadata": {
        "description": "Name of the secret that will store the jumpbox admin password"
      }
    },
    "vnet_address_space": {
      "type": "array",
      "metadata": {
        "description": "Address Space for Virtual Network"
      }
    },
    "snet_agw_address_prefix": {
      "type": "string",
      "metadata": {
        "description": "Address Prefix for Application Gateway Subnet"
      }
    },
    "snet_aks_address_prefix": {
      "type": "string",
      "metadata": {
        "description": "Address Prefix for Azure Kubernetes Service Subnet"
      }
    },
    "snet_cosmosdb_address_prefix": {
      "type": "string",
      "metadata": {
        "description": "Address Prefix for cosmosdb Server Subnet"
      }
    },
    "snet_shared_address_prefix": {
      "type": "string",
      "metadata": {
        "description": "Address Prefix for Shared Resources Subnet"
      }
    },
    "snet_bastion_address_prefix": {
      "type": "string",
      "metadata": {
        "description": "Address Prefix for Bastion Subnet"
      }
    },
    "availability_zones": {
      "type": "array",
      "defaultValue": [
        "1",
        "2",
        "3"
      ],
      "metadata": {
        "description": "Availability zone numbers e.g. 1,2,3."
      }
    }
  },
  "variables": {
    "tags": "[union(createObject('workload', parameters('workload'), 'environment', parameters('environment')), parameters('rg_tags'))]",
    "suffix": "[format('{0}-{1}-{2}', parameters('workload'), parameters('environment'), parameters('location_abbreviation'))]",
    "rg_name": "[format('rg-{0}', variables('suffix'))]",
    "rg_tags_final": "[union(createObject('workload', parameters('workload'), 'environment', parameters('environment')), variables('tags'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[variables('rg_name')]",
      "location": "[parameters('location')]",
      "tags": "[variables('rg_tags_final')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "azure-naming-deployment",
      "resourceGroup": "[variables('rg_name')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "suffix": {
            "value": [
              "[parameters('workload')]",
              "[parameters('environment')]",
              "**location**"
            ]
          },
          "uniqueLength": {
            "value": 5
          },
          "uniqueSeed": {
            "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rg_name'))]"
          },
          "useDashes": {
            "value": true
          },
          "useLowerCase": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.19.5.34762",
              "templateHash": "16623383862097342436"
            }
          },
          "parameters": {
            "prefix": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. It is not recommended that you use prefix by azure you should be using a suffix for your resources."
              }
            },
            "suffix": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. It is recommended that you specify a suffix for consistency. Please use only lowercase characters when possible."
              }
            },
            "uniqueSeed": {
              "type": "string",
              "defaultValue": "[resourceGroup().id]",
              "metadata": {
                "description": "Optional. Custom seed value for the unique string to be created -defaults to resourceGroup Id."
              }
            },
            "uniqueLength": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "Optional. Max length of the uniqueness suffix to be added -defaults to 4"
              }
            },
            "useDashes": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Use dashes as separator where applicable -defaults to true"
              }
            },
            "useLowerCase": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Create names using lowercase letters -defaults to true"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Used when region abbreviation is needed (placeholder value is \"**location**)"
              }
            }
          },
          "variables": {
            "uniquePart": "[substring(uniqueString(parameters('uniqueSeed')), 0, parameters('uniqueLength'))]",
            "delimiter": "[if(parameters('useDashes'), '-', '')]",
            "locationPlaceholder": "**location**",
            "regionAbbreviations": {
              "australiacentral": "auc",
              "australiacentral2": "auc2",
              "australiaeast": "aue",
              "australiasoutheast": "ause",
              "brazilsouth": "brs",
              "brazilsoutheast": "brse",
              "canadacentral": "canc",
              "canadaeast": "cane",
              "centralindia": "cin",
              "centralus": "cus",
              "centraluseuap": "cuseuap",
              "eastasia": "ea",
              "eastus": "eus",
              "eastus2": "eus2",
              "eastus2euap": "eus2euap",
              "francecentral": "frc",
              "francesouth": "frs",
              "germanynorth": "gern",
              "germanywestcentral": "gerwc",
              "japaneast": "jae",
              "japanwest": "jaw",
              "jioindiacentral": "jioinc",
              "jioindiawest": "jioinw",
              "koreacentral": "koc",
              "koreasouth": "kors",
              "northcentralus": "ncus",
              "northeurope": "neu",
              "norwayeast": "nore",
              "norwaywest": "norw",
              "southafricanorth": "san",
              "southafricawest": "saw",
              "southcentralus": "scus",
              "southeastasia": "sea",
              "southindia": "sin",
              "swedencentral": "swc",
              "switzerlandnorth": "swn",
              "switzerlandwest": "sww",
              "uaecentral": "uaec",
              "uaenorth": "uaen",
              "uksouth": "uks",
              "ukwest": "ukw",
              "westcentralus": "wcus",
              "westeurope": "weu",
              "westindia": "win",
              "westus": "wus",
              "westus2": "wus2",
              "westus3": "wus3"
            },
            "strPrefixJoined": "[if(empty(parameters('prefix')), '', format('{0}{1}', replace(replace(replace(string(parameters('prefix')), '[\"', ''), '\"]', ''), '\",\"', variables('delimiter')), variables('delimiter')))]",
            "strPrefixInterim": "[if(parameters('useLowerCase'), toLower(variables('strPrefixJoined')), variables('strPrefixJoined'))]",
            "strPrefix": "[replace(variables('strPrefixInterim'), variables('locationPlaceholder'), variables('regionAbbreviations')[parameters('location')])]",
            "strSuffixJoined": "[if(empty(parameters('suffix')), '', format('{0}{1}', variables('delimiter'), replace(replace(replace(string(parameters('suffix')), '[\"', ''), '\"]', ''), '\",\"', variables('delimiter'))))]",
            "strSuffixInterim": "[if(parameters('useLowerCase'), toLower(variables('strSuffixJoined')), variables('strSuffixJoined'))]",
            "strSuffix": "[replace(variables('strSuffixInterim'), variables('locationPlaceholder'), variables('regionAbbreviations')[parameters('location')])]",
            "placeholder": "[[****]",
            "nameTemplate": "[format('{0}{1}{2}', variables('strPrefix'), variables('placeholder'), variables('strSuffix'))]",
            "nameUniqueTemplate": "[format('{0}{1}{2}{3}{4}', variables('strPrefix'), variables('placeholder'), variables('strSuffix'), variables('delimiter'), variables('uniquePart'))]",
            "nameSafeTemplate": "[toLower(replace(variables('nameTemplate'), variables('delimiter'), ''))]",
            "nameUniqueSafeTemplate": "[toLower(replace(variables('nameUniqueTemplate'), variables('delimiter'), ''))]",
            "d": "[variables('delimiter')]",
            "ph": "[variables('placeholder')]",
            "nt": "[variables('nameTemplate')]",
            "nut": "[variables('nameUniqueTemplate')]",
            "nst": "[variables('nameSafeTemplate')]",
            "nust": "[variables('nameUniqueSafeTemplate')]",
            "names": {
              "analysisServicesServer": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'as'), 63)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'as'), 63)]",
                "slug": "as"
              },
              "apiManagement": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'apim'), 50)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'apim'), 50)]",
                "slug": "apim"
              },
              "appConfiguration": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'appcg'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'appcg'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'appcg'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'appcg'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'appcg'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'appcg'), 50))]",
                "slug": "appcg"
              },
              "appServiceEnvironment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ase'), 36), variables('d')), take(replace(variables('nt'), variables('ph'), 'ase'), sub(36, 1)), take(replace(variables('nt'), variables('ph'), 'ase'), 36))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ase'), 36), variables('d')), take(replace(variables('nut'), variables('ph'), 'ase'), sub(36, 1)), take(replace(variables('nut'), variables('ph'), 'ase'), 36))]",
                "slug": "ase"
              },
              "appServicePlan": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'plan'), 40), variables('d')), take(replace(variables('nt'), variables('ph'), 'plan'), sub(40, 1)), take(replace(variables('nt'), variables('ph'), 'plan'), 40))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'plan'), 40), variables('d')), take(replace(variables('nut'), variables('ph'), 'plan'), sub(40, 1)), take(replace(variables('nut'), variables('ph'), 'plan'), 40))]",
                "slug": "plan"
              },
              "appService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'app'), 60), variables('d')), take(replace(variables('nt'), variables('ph'), 'app'), sub(60, 1)), take(replace(variables('nt'), variables('ph'), 'app'), 60))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'app'), 60), variables('d')), take(replace(variables('nut'), variables('ph'), 'app'), sub(60, 1)), take(replace(variables('nut'), variables('ph'), 'app'), 60))]",
                "slug": "app"
              },
              "applicationGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'agw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'agw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'agw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'agw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'agw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'agw'), 80))]",
                "slug": "agw"
              },
              "applicationInsights": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'appi'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'appi'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'appi'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'appi'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'appi'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'appi'), 260))]",
                "slug": "appi"
              },
              "applicationSecurityGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asg'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'asg'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'asg'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asg'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'asg'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'asg'), 80))]",
                "slug": "asg"
              },
              "automationAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aa'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'aa'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'aa'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aa'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'aa'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'aa'), 50))]",
                "slug": "aa"
              },
              "automationCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aacert'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aacert'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aacert'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aacert'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aacert'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aacert'), 128))]",
                "slug": "aacert"
              },
              "automationCredential": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aacred'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aacred'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aacred'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aacred'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aacred'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aacred'), 128))]",
                "slug": "aacred"
              },
              "automationRunbook": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aacred'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'aacred'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'aacred'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aacred'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'aacred'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'aacred'), 63))]",
                "slug": "aacred"
              },
              "automationSchedule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aasched'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aasched'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aasched'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aasched'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aasched'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aasched'), 128))]",
                "slug": "aasched"
              },
              "automationVariable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aavar'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aavar'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aavar'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aavar'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aavar'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aavar'), 128))]",
                "slug": "aavar"
              },
              "availabilitySet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'avail'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'avail'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'avail'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'avail'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'avail'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'avail'), 80))]",
                "slug": "avail"
              },
              "bastionHost": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bas'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'bas'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'bas'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bas'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'bas'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'bas'), 80))]",
                "slug": "bas"
              },
              "batchAccount": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'ba'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'ba'), 24)]",
                "slug": "ba"
              },
              "batchApplication": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'baapp'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'baapp'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'baapp'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'baapp'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'baapp'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'baapp'), 64))]",
                "slug": "baapp"
              },
              "batchCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bacert'), 45), variables('d')), take(replace(variables('nt'), variables('ph'), 'bacert'), sub(45, 1)), take(replace(variables('nt'), variables('ph'), 'bacert'), 45))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bacert'), 45), variables('d')), take(replace(variables('nut'), variables('ph'), 'bacert'), sub(45, 1)), take(replace(variables('nut'), variables('ph'), 'bacert'), 45))]",
                "slug": "bacert"
              },
              "batchPool": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bapool'), 24), variables('d')), take(replace(variables('nt'), variables('ph'), 'bapool'), sub(24, 1)), take(replace(variables('nt'), variables('ph'), 'bapool'), 24))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bapool'), 24), variables('d')), take(replace(variables('nut'), variables('ph'), 'bapool'), sub(24, 1)), take(replace(variables('nut'), variables('ph'), 'bapool'), 24))]",
                "slug": "bapool"
              },
              "botChannelDirectline": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botline'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botline'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botline'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botline'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botline'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botline'), 64))]",
                "slug": "botline"
              },
              "botChannelEmail": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botmail'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botmail'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botmail'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botmail'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botmail'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botmail'), 64))]",
                "slug": "botmail"
              },
              "botChannelMsTeams": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botteams'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botteams'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botteams'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botteams'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botteams'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botteams'), 64))]",
                "slug": "botteams"
              },
              "botChannelSlack": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botslack'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botslack'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botslack'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botslack'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botslack'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botslack'), 64))]",
                "slug": "botslack"
              },
              "botChannelsRegistration": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botchan'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botchan'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botchan'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botchan'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botchan'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botchan'), 64))]",
                "slug": "botchan"
              },
              "botConnection": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botcon'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botcon'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botcon'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botcon'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botcon'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botcon'), 64))]",
                "slug": "botcon"
              },
              "botWebApp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bot'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'bot'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'bot'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bot'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'bot'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'bot'), 64))]",
                "slug": "bot"
              },
              "cdnEndpoint": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cdn'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'cdn'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'cdn'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cdn'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'cdn'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'cdn'), 50))]",
                "slug": "cdn"
              },
              "cdnProfile": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cdnprof'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'cdnprof'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'cdnprof'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cdnprof'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'cdnprof'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'cdnprof'), 260))]",
                "slug": "cdnprof"
              },
              "cognitiveAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cog'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'cog'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'cog'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cog'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'cog'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'cog'), 64))]",
                "slug": "cog"
              },
              "containerApps": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ca'), 32), variables('d')), take(replace(variables('nt'), variables('ph'), 'ca'), sub(32, 1)), take(replace(variables('nt'), variables('ph'), 'ca'), 32))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ca'), 32), variables('d')), take(replace(variables('nut'), variables('ph'), 'ca'), sub(32, 1)), take(replace(variables('nut'), variables('ph'), 'ca'), 32))]",
                "slug": "ca"
              },
              "containerAppsEnvironment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cae'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'cae'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'cae'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cae'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'cae'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'cae'), 64))]",
                "slug": "cae"
              },
              "containerGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cg'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'cg'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'cg'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cg'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'cg'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'cg'), 63))]",
                "slug": "cg"
              },
              "containerRegistry": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'acr'), 63)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'acr'), 63)]",
                "slug": "acr"
              },
              "containerRegistryWebhook": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'crwh'), 50)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'crwh'), 50)]",
                "slug": "crwh"
              },
              "cosmosdbAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cosmos'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'cosmos'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'cosmos'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cosmos'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'cosmos'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'cosmos'), 63))]",
                "slug": "cosmos"
              },
              "customProvider": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'prov'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'prov'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'prov'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'prov'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'prov'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'prov'), 64))]",
                "slug": "prov"
              },
              "dashboard": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dsb'), 160), variables('d')), take(replace(variables('nt'), variables('ph'), 'dsb'), sub(160, 1)), take(replace(variables('nt'), variables('ph'), 'dsb'), 160))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dsb'), 160), variables('d')), take(replace(variables('nut'), variables('ph'), 'dsb'), sub(160, 1)), take(replace(variables('nut'), variables('ph'), 'dsb'), 160))]",
                "slug": "dsb"
              },
              "dataFactory": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adf'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'adf'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'adf'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adf'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'adf'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'adf'), 63))]",
                "slug": "adf"
              },
              "dataFactoryDatasetMysql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfmysql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfmysql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfmysql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfmysql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfmysql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfmysql'), 260))]",
                "slug": "adfmysql"
              },
              "dataFactoryDatasetPostgresql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfpsql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfpsql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfpsql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfpsql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfpsql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfpsql'), 260))]",
                "slug": "adfpsql"
              },
              "dataFactoryDatasetSqlServerTable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfmssql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfmssql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfmssql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfmssql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfmssql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfmssql'), 260))]",
                "slug": "adfmssql"
              },
              "dataFactoryIntegrationRuntimeManaged": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfir'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfir'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'adfir'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfir'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfir'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'adfir'), 63))]",
                "slug": "adfir"
              },
              "dataFactoryLinkedServiceDataLakeStorageGen2": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvst'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvst'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvst'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvst'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvst'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvst'), 260))]",
                "slug": "adfsvst"
              },
              "dataFactoryLinkedServiceKeyVault": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvkv'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvkv'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvkv'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvkv'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvkv'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvkv'), 260))]",
                "slug": "adfsvkv"
              },
              "dataFactoryLinkedServiceMysql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvmysql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvmysql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvmysql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvmysql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvmysql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvmysql'), 260))]",
                "slug": "adfsvmysql"
              },
              "dataFactoryLinkedServicePostgresql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvpsql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvpsql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvpsql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvpsql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvpsql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvpsql'), 260))]",
                "slug": "adfsvpsql"
              },
              "dataFactoryLinkedServiceSqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvmssql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvmssql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvmssql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvmssql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvmssql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvmssql'), 260))]",
                "slug": "adfsvmssql"
              },
              "dataFactoryPipeline": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfpl'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfpl'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfpl'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfpl'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfpl'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfpl'), 260))]",
                "slug": "adfpl"
              },
              "dataFactoryTriggerSchedule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adftg'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adftg'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adftg'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adftg'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adftg'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adftg'), 260))]",
                "slug": "adftg"
              },
              "dataLakeAnalyticsAccount": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'dla'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'dla'), 24)]",
                "slug": "dla"
              },
              "dataLakeAnalyticsFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dlfw'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dlfw'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dlfw'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dlfw'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dlfw'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dlfw'), 50))]",
                "slug": "dlfw"
              },
              "dataLakeStore": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'dls'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'dls'), 24)]",
                "slug": "dls"
              },
              "dataLakeStoreFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dlsfw'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dlsfw'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dlsfw'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dlsfw'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dlsfw'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dlsfw'), 50))]",
                "slug": "dlsfw"
              },
              "databaseMigrationProject": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'migr'), 57), variables('d')), take(replace(variables('nt'), variables('ph'), 'migr'), sub(57, 1)), take(replace(variables('nt'), variables('ph'), 'migr'), 57))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'migr'), 57), variables('d')), take(replace(variables('nut'), variables('ph'), 'migr'), sub(57, 1)), take(replace(variables('nut'), variables('ph'), 'migr'), 57))]",
                "slug": "migr"
              },
              "databaseMigrationService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dms'), 62), variables('d')), take(replace(variables('nt'), variables('ph'), 'dms'), sub(62, 1)), take(replace(variables('nt'), variables('ph'), 'dms'), 62))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dms'), 62), variables('d')), take(replace(variables('nut'), variables('ph'), 'dms'), sub(62, 1)), take(replace(variables('nut'), variables('ph'), 'dms'), 62))]",
                "slug": "dms"
              },
              "databricksWorkspace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dbw'), 30), variables('d')), take(replace(variables('nt'), variables('ph'), 'dbw'), sub(30, 1)), take(replace(variables('nt'), variables('ph'), 'dbw'), 30))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dbw'), 30), variables('d')), take(replace(variables('nut'), variables('ph'), 'dbw'), sub(30, 1)), take(replace(variables('nut'), variables('ph'), 'dbw'), 30))]",
                "slug": "dbw"
              },
              "devTestLab": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lab'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'lab'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'lab'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lab'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'lab'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'lab'), 50))]",
                "slug": "lab"
              },
              "devTestLinuxVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'labvm'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'labvm'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'labvm'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'labvm'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'labvm'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'labvm'), 64))]",
                "slug": "labvm"
              },
              "devTestWindowsVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'labvm'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'labvm'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'labvm'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'labvm'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'labvm'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'labvm'), 15))]",
                "slug": "labvm"
              },
              "diskEncryptionSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'des'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'des'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'des'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'des'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'des'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'des'), 80))]",
                "slug": "des"
              },
              "dnsZone": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dns'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'dns'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'dns'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dns'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'dns'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'dns'), 63))]",
                "slug": "dns"
              },
              "eventGridDomain": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egd'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'egd'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'egd'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egd'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'egd'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'egd'), 50))]",
                "slug": "egd"
              },
              "eventGridDomainTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egdt'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'egdt'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'egdt'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egdt'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'egdt'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'egdt'), 50))]",
                "slug": "egdt"
              },
              "eventGridEventSubscription": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egs'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'egs'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'egs'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egs'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'egs'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'egs'), 64))]",
                "slug": "egs"
              },
              "eventGridTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egt'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'egt'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'egt'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egt'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'egt'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'egt'), 50))]",
                "slug": "egt"
              },
              "eventHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'evh'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'evh'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'evh'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'evh'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'evh'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'evh'), 50))]",
                "slug": "evh"
              },
              "eventHubAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehar'), 50))]",
                "slug": "ehar"
              },
              "eventHubConsumerGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehcg'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehcg'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehcg'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehcg'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehcg'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehcg'), 50))]",
                "slug": "ehcg"
              },
              "eventHubNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehn'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehn'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehn'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehn'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehn'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehn'), 50))]",
                "slug": "ehn"
              },
              "eventHubNamespaceAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehnar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehnar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehnar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehnar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehnar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehnar'), 50))]",
                "slug": "ehnar"
              },
              "eventHubNamespaceDisasterRecoveryConfig": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehdr'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehdr'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehdr'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehdr'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehdr'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehdr'), 50))]",
                "slug": "ehdr"
              },
              "expressRouteCircuit": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'erc'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'erc'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'erc'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'erc'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'erc'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'erc'), 80))]",
                "slug": "erc"
              },
              "expressRouteGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ergw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'ergw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'ergw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ergw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'ergw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'ergw'), 80))]",
                "slug": "ergw"
              },
              "firewall": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'afw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'afw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'afw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'afw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'afw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'afw'), 80))]",
                "slug": "afw"
              },
              "firewallPolicy": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'afwp'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'afwp'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'afwp'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'afwp'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'afwp'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'afwp'), 80))]",
                "slug": "afwp"
              },
              "frontDoor": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'fd'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'fd'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'fd'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'fd'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'fd'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'fd'), 64))]",
                "slug": "fd"
              },
              "frontDoorFirewallPolicy": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'fdfw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'fdfw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'fdfw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'fdfw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'fdfw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'fdfw'), 80))]",
                "slug": "fdfw"
              },
              "functionApp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'func'), 60), variables('d')), take(replace(variables('nt'), variables('ph'), 'func'), sub(60, 1)), take(replace(variables('nt'), variables('ph'), 'func'), 60))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'func'), 60), variables('d')), take(replace(variables('nut'), variables('ph'), 'func'), sub(60, 1)), take(replace(variables('nut'), variables('ph'), 'func'), 60))]",
                "slug": "func"
              },
              "hdInsightHadoopCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'hadoop'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'hadoop'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'hadoop'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'hadoop'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'hadoop'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'hadoop'), 59))]",
                "slug": "hadoop"
              },
              "hdInsightHbaseCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'hbase'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'hbase'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'hbase'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'hbase'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'hbase'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'hbase'), 59))]",
                "slug": "hbase"
              },
              "hdInsightInteractiveQueryCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iqr'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'iqr'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'iqr'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iqr'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'iqr'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'iqr'), 59))]",
                "slug": "iqr"
              },
              "hdInsightKafkaCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kafka'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'kafka'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'kafka'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kafka'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'kafka'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'kafka'), 59))]",
                "slug": "kafka"
              },
              "hdInsightMlServicesCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mls'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'mls'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'mls'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mls'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'mls'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'mls'), 59))]",
                "slug": "mls"
              },
              "hdInsightRserverCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rsv'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'rsv'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'rsv'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rsv'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'rsv'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'rsv'), 59))]",
                "slug": "rsv"
              },
              "hdInsightSparkCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'spark'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'spark'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'spark'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'spark'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'spark'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'spark'), 59))]",
                "slug": "spark"
              },
              "hdInsightStormCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'storm'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'storm'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'storm'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'storm'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'storm'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'storm'), 59))]",
                "slug": "storm"
              },
              "image": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'img'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'img'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'img'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'img'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'img'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'img'), 80))]",
                "slug": "img"
              },
              "iotCentralApplication": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iotapp'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'iotapp'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'iotapp'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iotapp'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'iotapp'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'iotapp'), 63))]",
                "slug": "iotapp"
              },
              "iotHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iot'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'iot'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'iot'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iot'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'iot'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'iot'), 50))]",
                "slug": "iot"
              },
              "iotHubConsumerGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iotcg'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'iotcg'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'iotcg'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iotcg'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'iotcg'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'iotcg'), 50))]",
                "slug": "iotcg"
              },
              "iotHubDps": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dps'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'dps'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'dps'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dps'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'dps'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'dps'), 64))]",
                "slug": "dps"
              },
              "iotHubDpsCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dpscert'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'dpscert'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'dpscert'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dpscert'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'dpscert'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'dpscert'), 64))]",
                "slug": "dpscert"
              },
              "keyVault": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kv'), 24), variables('d')), take(replace(variables('nt'), variables('ph'), 'kv'), sub(24, 1)), take(replace(variables('nt'), variables('ph'), 'kv'), 24))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kv'), 24), variables('d')), take(replace(variables('nut'), variables('ph'), 'kv'), sub(24, 1)), take(replace(variables('nut'), variables('ph'), 'kv'), 24))]",
                "slug": "kv"
              },
              "keyVaultCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kvc'), 127), variables('d')), take(replace(variables('nt'), variables('ph'), 'kvc'), sub(127, 1)), take(replace(variables('nt'), variables('ph'), 'kvc'), 127))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kvc'), 127), variables('d')), take(replace(variables('nut'), variables('ph'), 'kvc'), sub(127, 1)), take(replace(variables('nut'), variables('ph'), 'kvc'), 127))]",
                "slug": "kvc"
              },
              "keyVaultKey": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kvk'), 127), variables('d')), take(replace(variables('nt'), variables('ph'), 'kvk'), sub(127, 1)), take(replace(variables('nt'), variables('ph'), 'kvk'), 127))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kvk'), 127), variables('d')), take(replace(variables('nut'), variables('ph'), 'kvk'), sub(127, 1)), take(replace(variables('nut'), variables('ph'), 'kvk'), 127))]",
                "slug": "kvk"
              },
              "keyVaultSecret": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kvs'), 127), variables('d')), take(replace(variables('nt'), variables('ph'), 'kvs'), sub(127, 1)), take(replace(variables('nt'), variables('ph'), 'kvs'), 127))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kvs'), 127), variables('d')), take(replace(variables('nut'), variables('ph'), 'kvs'), sub(127, 1)), take(replace(variables('nut'), variables('ph'), 'kvs'), 127))]",
                "slug": "kvs"
              },
              "kubernetesCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aks'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'aks'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'aks'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aks'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'aks'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'aks'), 63))]",
                "slug": "aks"
              },
              "kustoCluster": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'kc'), 22)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'kc'), 22)]",
                "slug": "kc"
              },
              "kustoDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kdb'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'kdb'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'kdb'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kdb'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'kdb'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'kdb'), 260))]",
                "slug": "kdb"
              },
              "kustoEventHubDataConnection": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kehc'), 40), variables('d')), take(replace(variables('nt'), variables('ph'), 'kehc'), sub(40, 1)), take(replace(variables('nt'), variables('ph'), 'kehc'), 40))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kehc'), 40), variables('d')), take(replace(variables('nut'), variables('ph'), 'kehc'), sub(40, 1)), take(replace(variables('nut'), variables('ph'), 'kehc'), 40))]",
                "slug": "kehc"
              },
              "loadBalancer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lb'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'lb'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'lb'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lb'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'lb'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'lb'), 80))]",
                "slug": "lb"
              },
              "loadBalancerNatRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lbnatrl'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'lbnatrl'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'lbnatrl'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lbnatrl'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'lbnatrl'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'lbnatrl'), 80))]",
                "slug": "lbnatrl"
              },
              "loadTesting": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lt'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'lt'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'lt'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lt'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'lt'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'lt'), 64))]",
                "slug": "lt"
              },
              "linuxVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vm'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'vm'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'vm'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vm'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'vm'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'vm'), 64))]",
                "slug": "vm"
              },
              "linuxVirtualMachineScaleSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vmss'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'vmss'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'vmss'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vmss'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'vmss'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'vmss'), 64))]",
                "slug": "vmss"
              },
              "localNetworkGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lgw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'lgw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'lgw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lgw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'lgw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'lgw'), 80))]",
                "slug": "lgw"
              },
              "logAnalyticsWorkspace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'log'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'log'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'log'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'log'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'log'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'log'), 63))]",
                "slug": "log"
              },
              "machineLearningWorkspace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mlw'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'mlw'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'mlw'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mlw'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'mlw'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'mlw'), 260))]",
                "slug": "mlw"
              },
              "managedDisk": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dsk'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'dsk'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'dsk'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dsk'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'dsk'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'dsk'), 80))]",
                "slug": "dsk"
              },
              "mapsAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'map'), 98), variables('d')), take(replace(variables('nt'), variables('ph'), 'map'), sub(98, 1)), take(replace(variables('nt'), variables('ph'), 'map'), 98))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'map'), 98), variables('d')), take(replace(variables('nut'), variables('ph'), 'map'), sub(98, 1)), take(replace(variables('nut'), variables('ph'), 'map'), 98))]",
                "slug": "map"
              },
              "mariadbDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mariadb'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'mariadb'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'mariadb'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mariadb'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'mariadb'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'mariadb'), 63))]",
                "slug": "mariadb"
              },
              "mariadbFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mariafw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mariafw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mariafw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mariafw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mariafw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mariafw'), 128))]",
                "slug": "mariafw"
              },
              "mariadbServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'maria'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'maria'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'maria'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'maria'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'maria'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'maria'), 63))]",
                "slug": "maria"
              },
              "mariadbVirtualNetworkRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mariavn'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mariavn'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mariavn'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mariavn'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mariavn'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mariavn'), 128))]",
                "slug": "mariavn"
              },
              "mssqlDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqldb'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqldb'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqldb'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqldb'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqldb'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqldb'), 128))]",
                "slug": "sqldb"
              },
              "mssqlElasticpool": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqlep'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqlep'), 128))]",
                "slug": "sqlep"
              },
              "mssqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sql'), 63))]",
                "slug": "sql"
              },
              "mysqlDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysqldb'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysqldb'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'mysqldb'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysqldb'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysqldb'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'mysqldb'), 63))]",
                "slug": "mysqldb"
              },
              "mysqlFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysqlfw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysqlfw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mysqlfw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysqlfw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysqlfw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mysqlfw'), 128))]",
                "slug": "mysqlfw"
              },
              "mysqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'mysql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'mysql'), 63))]",
                "slug": "mysql"
              },
              "mysqlVirtualNetworkRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysqlvn'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysqlvn'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mysqlvn'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysqlvn'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysqlvn'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mysqlvn'), 128))]",
                "slug": "mysqlvn"
              },
              "networkInterface": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nic'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nic'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nic'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nic'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nic'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nic'), 80))]",
                "slug": "nic"
              },
              "networkSecurityGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nsg'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nsg'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nsg'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nsg'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nsg'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nsg'), 80))]",
                "slug": "nsg"
              },
              "networkSecurityGroupRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nsgr'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nsgr'), 80))]",
                "slug": "nsgr"
              },
              "networkSecurityRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nsgr'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nsgr'), 80))]",
                "slug": "nsgr"
              },
              "networkWatcher": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nw'), 80))]",
                "slug": "nw"
              },
              "notificationHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nh'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'nh'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'nh'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nh'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'nh'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'nh'), 260))]",
                "slug": "nh"
              },
              "notificationHubAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dnsrec'), 256), variables('d')), take(replace(variables('nt'), variables('ph'), 'dnsrec'), sub(256, 1)), take(replace(variables('nt'), variables('ph'), 'dnsrec'), 256))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dnsrec'), 256), variables('d')), take(replace(variables('nut'), variables('ph'), 'dnsrec'), sub(256, 1)), take(replace(variables('nut'), variables('ph'), 'dnsrec'), 256))]",
                "slug": "dnsrec"
              },
              "notificationHubNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50))]",
                "slug": "dnsrec"
              },
              "pointToSiteVpnGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vpngw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vpngw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vpngw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vpngw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vpngw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vpngw'), 80))]",
                "slug": "vpngw"
              },
              "postgresqlDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psqldb'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'psqldb'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'psqldb'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psqldb'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'psqldb'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'psqldb'), 63))]",
                "slug": "psqldb"
              },
              "postgresqlFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psqlfw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'psqlfw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'psqlfw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psqlfw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'psqlfw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'psqlfw'), 128))]",
                "slug": "psqlfw"
              },
              "postgresqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'psql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'psql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'psql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'psql'), 63))]",
                "slug": "psql"
              },
              "postgresqlVirtualNetworkRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psqlvn'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'psqlvn'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'psqlvn'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psqlvn'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'psqlvn'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'psqlvn'), 128))]",
                "slug": "psqlvn"
              },
              "powerbiEmbedded": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pbi'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'pbi'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'pbi'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pbi'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'pbi'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'pbi'), 63))]",
                "slug": "pbi"
              },
              "privateDnsZone": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pdns'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'pdns'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'pdns'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pdns'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'pdns'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'pdns'), 63))]",
                "slug": "pdns"
              },
              "publicIp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pip'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'pip'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'pip'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pip'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'pip'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'pip'), 80))]",
                "slug": "pip"
              },
              "publicIpPrefix": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pippf'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'pippf'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'pippf'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pippf'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'pippf'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'pippf'), 80))]",
                "slug": "pippf"
              },
              "redisCache": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'redis'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'redis'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'redis'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'redis'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'redis'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'redis'), 63))]",
                "slug": "redis"
              },
              "redisFirewallRule": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'redisfw'), 256)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'redisfw'), 256)]",
                "slug": "redisfw"
              },
              "relayHybridConnection": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rlhc'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'rlhc'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'rlhc'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rlhc'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'rlhc'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'rlhc'), 260))]",
                "slug": "rlhc"
              },
              "relayNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rln'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'rln'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'rln'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rln'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'rln'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'rln'), 50))]",
                "slug": "rln"
              },
              "resourceGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rg'), 90), variables('d')), take(replace(variables('nt'), variables('ph'), 'rg'), sub(90, 1)), take(replace(variables('nt'), variables('ph'), 'rg'), 90))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rg'), 90), variables('d')), take(replace(variables('nut'), variables('ph'), 'rg'), sub(90, 1)), take(replace(variables('nut'), variables('ph'), 'rg'), 90))]",
                "slug": "rg"
              },
              "roleAssignment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ra'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'ra'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'ra'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ra'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'ra'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'ra'), 64))]",
                "slug": "ra"
              },
              "roleDefinition": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rd'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'rd'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'rd'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rd'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'rd'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'rd'), 64))]",
                "slug": "rd"
              },
              "route": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rt'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'rt'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'rt'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rt'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'rt'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'rt'), 80))]",
                "slug": "rt"
              },
              "routeTable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'route'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'route'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'route'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'route'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'route'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'route'), 80))]",
                "slug": "route"
              },
              "serviceFabricCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sf'), 23), variables('d')), take(replace(variables('nt'), variables('ph'), 'sf'), sub(23, 1)), take(replace(variables('nt'), variables('ph'), 'sf'), 23))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sf'), 23), variables('d')), take(replace(variables('nut'), variables('ph'), 'sf'), sub(23, 1)), take(replace(variables('nut'), variables('ph'), 'sf'), 23))]",
                "slug": "sf"
              },
              "serviceBusNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sb'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sb'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sb'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sb'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sb'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sb'), 50))]",
                "slug": "sb"
              },
              "serviceBusNamespaceAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbar'), 50))]",
                "slug": "sbar"
              },
              "serviceBusQueue": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbq'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbq'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'sbq'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbq'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbq'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'sbq'), 260))]",
                "slug": "sbq"
              },
              "serviceBusQueueAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbqar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbqar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbqar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbqar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbqar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbqar'), 50))]",
                "slug": "sbqar"
              },
              "serviceBusSubscription": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbs'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbs'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbs'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbs'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbs'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbs'), 50))]",
                "slug": "sbs"
              },
              "serviceBusSubscriptionRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbsr'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbsr'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbsr'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbsr'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbsr'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbsr'), 50))]",
                "slug": "sbsr"
              },
              "serviceBusTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbt'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbt'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'sbt'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbt'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbt'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'sbt'), 260))]",
                "slug": "sbt"
              },
              "serviceBusTopicAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50))]",
                "slug": "dnsrec"
              },
              "sharedImage": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'si'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'si'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'si'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'si'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'si'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'si'), 80))]",
                "slug": "si"
              },
              "sharedImageGallery": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'sig'), 80)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'sig'), 80)]",
                "slug": "sig"
              },
              "signalrService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sgnlr'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sgnlr'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sgnlr'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sgnlr'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sgnlr'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sgnlr'), 63))]",
                "slug": "sgnlr"
              },
              "snapshots": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'snap'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'snap'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'snap'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'snap'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'snap'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'snap'), 80))]",
                "slug": "snap"
              },
              "sqlElasticpool": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqlep'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqlep'), 128))]",
                "slug": "sqlep"
              },
              "sqlFailoverGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlfg'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlfg'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sqlfg'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlfg'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlfg'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sqlfg'), 63))]",
                "slug": "sqlfg"
              },
              "sqlFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlfw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlfw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqlfw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlfw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlfw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqlfw'), 128))]",
                "slug": "sqlfw"
              },
              "sqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sql'), 63))]",
                "slug": "sql"
              },
              "storageAccount": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'st'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'st'), 24)]",
                "slug": "st"
              },
              "storageBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'blob'), 1024), variables('d')), take(replace(variables('nt'), variables('ph'), 'blob'), sub(1024, 1)), take(replace(variables('nt'), variables('ph'), 'blob'), 1024))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'blob'), 1024), variables('d')), take(replace(variables('nut'), variables('ph'), 'blob'), sub(1024, 1)), take(replace(variables('nut'), variables('ph'), 'blob'), 1024))]",
                "slug": "blob"
              },
              "storageContainer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stct'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stct'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stct'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stct'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stct'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stct'), 63))]",
                "slug": "stct"
              },
              "storageDataLakeGen2Filesystem": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stdl'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stdl'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stdl'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stdl'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stdl'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stdl'), 63))]",
                "slug": "stdl"
              },
              "storageQueue": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stq'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stq'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stq'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stq'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stq'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stq'), 63))]",
                "slug": "stq"
              },
              "storageShare": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sts'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sts'), 63))]",
                "slug": "sts"
              },
              "storageShareDirectory": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sts'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sts'), 63))]",
                "slug": "sts"
              },
              "storageTable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stt'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stt'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stt'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stt'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stt'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stt'), 63))]",
                "slug": "stt"
              },
              "streamAnalyticsFunctionJavascriptUdf": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asafunc'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asafunc'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asafunc'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asafunc'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asafunc'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asafunc'), 63))]",
                "slug": "asafunc"
              },
              "streamAnalyticsJob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asa'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asa'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asa'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asa'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asa'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asa'), 63))]",
                "slug": "asa"
              },
              "streamAnalyticsOutputBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaoblob'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaoblob'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaoblob'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaoblob'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaoblob'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaoblob'), 63))]",
                "slug": "asaoblob"
              },
              "streamAnalyticsOutputEventHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaoeh'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaoeh'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaoeh'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaoeh'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaoeh'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaoeh'), 63))]",
                "slug": "asaoeh"
              },
              "streamAnalyticsOutputMssql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaomssql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaomssql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaomssql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaomssql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaomssql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaomssql'), 63))]",
                "slug": "asaomssql"
              },
              "streamAnalyticsOutputServiceBusQueue": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaosbq'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaosbq'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaosbq'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaosbq'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaosbq'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaosbq'), 63))]",
                "slug": "asaosbq"
              },
              "streamAnalyticsOutputServiceBusTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaosbt'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaosbt'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaosbt'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaosbt'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaosbt'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaosbt'), 63))]",
                "slug": "asaosbt"
              },
              "streamAnalyticsReferenceInputBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asarblob'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asarblob'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asarblob'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asarblob'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asarblob'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asarblob'), 63))]",
                "slug": "asarblob"
              },
              "streamAnalyticsStreamInputBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaiblob'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaiblob'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaiblob'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaiblob'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaiblob'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaiblob'), 63))]",
                "slug": "asaiblob"
              },
              "streamAnalyticsStreamInputEventHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaieh'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaieh'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaieh'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaieh'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaieh'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaieh'), 63))]",
                "slug": "asaieh"
              },
              "streamAnalyticsStreamInputIotHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaiiot'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaiiot'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaiiot'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaiiot'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaiiot'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaiiot'), 63))]",
                "slug": "asaiiot"
              },
              "subnet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'snet'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'snet'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'snet'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'snet'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'snet'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'snet'), 80))]",
                "slug": "snet"
              },
              "templateDeployment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'deploy'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'deploy'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'deploy'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'deploy'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'deploy'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'deploy'), 64))]",
                "slug": "deploy"
              },
              "trafficManagerProfile": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'traf'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'traf'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'traf'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'traf'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'traf'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'traf'), 63))]",
                "slug": "traf"
              },
              "virtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vm'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vm'), 15))]",
                "slug": "vm"
              },
              "virtualMachineScaleSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vmss'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vmss'), 15))]",
                "slug": "vmss"
              },
              "virtualNetwork": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vnet'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'vnet'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'vnet'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vnet'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'vnet'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'vnet'), 64))]",
                "slug": "vnet"
              },
              "virtualNetworkGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vgw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vgw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vgw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vgw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vgw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vgw'), 80))]",
                "slug": "vgw"
              },
              "virtualNetworkPeering": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vpeer'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vpeer'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vpeer'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vpeer'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vpeer'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vpeer'), 80))]",
                "slug": "vpeer"
              },
              "virtualWan": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vwan'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vwan'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vwan'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vwan'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vwan'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vwan'), 80))]",
                "slug": "vwan"
              },
              "windowsVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vm'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vm'), 15))]",
                "slug": "vm"
              },
              "windowsVirtualMachineScaleSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vmss'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vmss'), 15))]",
                "slug": "vmss"
              }
            }
          },
          "resources": [],
          "outputs": {
            "names": {
              "type": "object",
              "value": "[variables('names')]"
            },
            "regionAbbreviations": {
              "type": "object",
              "value": "[variables('regionAbbreviations')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rg_name'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deployment-{0}', variables('suffix'))]",
      "resourceGroup": "[variables('rg_name')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "rg_name": {
            "value": "[variables('rg_name')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workload": {
            "value": "[parameters('workload')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "location_abbreviation": {
            "value": "[parameters('location_abbreviation')]"
          },
          "naming": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rg_name')), 'Microsoft.Resources/deployments', 'azure-naming-deployment'), '2022-09-01').outputs.names.value]"
          },
          "jumpbox_admin_username": {
            "value": "[parameters('jumpbox_admin_username')]"
          },
          "jumpbox_admin_password": {
            "value": "[parameters('jumpbox_admin_password')]"
          },
          "jumpbox_admin_password_secret_name": {
            "value": "[parameters('jumpbox_admin_password_secret_name')]"
          },
          "cosmosdb_admin_password": {
            "value": "[parameters('cosmosdb_admin_password')]"
          },
          "cosmosdb_admin_password_secret_name": {
            "value": "[parameters('cosmosdb_admin_password_secret_name')]"
          },
          "vnet_address_space": {
            "value": "[parameters('vnet_address_space')]"
          },
          "snet_agw_address_prefix": {
            "value": "[parameters('snet_agw_address_prefix')]"
          },
          "snet_aks_address_prefix": {
            "value": "[parameters('snet_aks_address_prefix')]"
          },
          "snet_bastion_address_prefix": {
            "value": "[parameters('snet_bastion_address_prefix')]"
          },
          "snet_cosmosdb_address_prefix": {
            "value": "[parameters('snet_cosmosdb_address_prefix')]"
          },
          "snet_shared_address_prefix": {
            "value": "[parameters('snet_shared_address_prefix')]"
          },
          "availability_zones": {
            "value": "[parameters('availability_zones')]"
          },
          "azurePAT": {
            "value": "[parameters('azurePAT')]"
          },
          "AzureDevOpsURL": {
            "value": "[parameters('AzureDevOpsURL')]"
          },
          "AgentPoolName": {
            "value": "[parameters('AgentPoolName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.19.5.34762",
              "templateHash": "8814985433244006055"
            },
            "namme": "main deployment",
            "description": "- item 1\n- item 2\n"
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "location_abbreviation": {
              "type": "string"
            },
            "workload": {
              "type": "string"
            },
            "environment": {
              "type": "string"
            },
            "rg_tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to be applied on the resource group"
              }
            },
            "naming": {
              "type": "object",
              "metadata": {
                "description": "Object of the Azure Naming module"
              }
            },
            "rg_name": {
              "type": "string",
              "metadata": {
                "description": "name of the resource group where the workload will be deployed"
              }
            },
            "availability_zones": {
              "type": "array",
              "metadata": {
                "description": "Availability Zone for redundancy"
              }
            },
            "jumpbox_admin_username": {
              "type": "string",
              "metadata": {
                "description": "Username of the jumpbox admin"
              }
            },
            "jumpbox_admin_password": {
              "type": "securestring",
              "metadata": {
                "description": "Password of the jumpbox admin"
              }
            },
            "cosmosdb_admin_password": {
              "type": "securestring",
              "metadata": {
                "description": "Password of the cosmosdb admin"
              }
            },
            "cosmosdb_admin_password_secret_name": {
              "type": "string",
              "metadata": {
                "description": "Name of the secret that will store the cosmosdb admin password"
              }
            },
            "jumpbox_admin_password_secret_name": {
              "type": "string",
              "metadata": {
                "description": "Name of the secret that will store the jumpbox admin password"
              }
            },
            "vnet_address_space": {
              "type": "array",
              "metadata": {
                "description": "Address Space for Virtual Network"
              }
            },
            "snet_agw_address_prefix": {
              "type": "string",
              "metadata": {
                "description": "Address Prefix for Application Gateway Subnet"
              }
            },
            "snet_aks_address_prefix": {
              "type": "string",
              "metadata": {
                "description": "Address Prefix for Azure Kubernetes Service Subnet"
              }
            },
            "snet_cosmosdb_address_prefix": {
              "type": "string",
              "metadata": {
                "description": "Address Prefix for CosmosDB Server Subnet"
              }
            },
            "snet_shared_address_prefix": {
              "type": "string",
              "metadata": {
                "description": "Address Prefix for Shared Resources Subnet"
              }
            },
            "snet_bastion_address_prefix": {
              "type": "string",
              "metadata": {
                "description": "Address Prefix for Bastion Subnet"
              }
            },
            "azurePAT": {
              "type": "securestring",
              "metadata": {
                "description": "PAT azure devops"
              }
            },
            "AzureDevOpsURL": {
              "type": "string",
              "metadata": {
                "description": "Azure DevOps Organization URL"
              }
            },
            "AgentPoolName": {
              "type": "string",
              "metadata": {
                "description": "Self hosted pool name"
              }
            }
          },
          "variables": {
            "kv_name": "[format('{0}', parameters('naming').keyVault.nameUnique)]",
            "suffix": "[format('{0}-{1}-{2}', parameters('workload'), parameters('environment'), parameters('location_abbreviation'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "nsg-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "suffix": {
                    "value": "[variables('suffix')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.19.5.34762",
                      "templateHash": "700150066800268111"
                    }
                  },
                  "parameters": {
                    "suffix": {
                      "type": "string",
                      "metadata": {
                        "description": "Name suffix"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location of nsg"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2022-07-01",
                      "name": "[format('nsg-vm-{0}', parameters('suffix'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "securityRules": [
                          {
                            "name": "default-allow-22",
                            "properties": {
                              "priority": 100,
                              "access": "Allow",
                              "direction": "Inbound",
                              "destinationPortRange": "22",
                              "protocol": "Tcp",
                              "sourceAddressPrefix": "VirtualNetwork",
                              "sourcePortRange": "*",
                              "destinationAddressPrefix": "*"
                            }
                          },
                          {
                            "name": "deny-hop-outbound",
                            "properties": {
                              "priority": 200,
                              "access": "Deny",
                              "protocol": "Tcp",
                              "direction": "Outbound",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "VirtualNetwork",
                              "destinationAddressPrefix": "*",
                              "destinationPortRanges": [
                                "3389",
                                "22"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2020-07-01",
                      "name": "[format('nsg-bastion-{0}', parameters('suffix'))]",
                      "location": "[parameters('location')]",
                      "tags": {},
                      "properties": {
                        "securityRules": [
                          {
                            "name": "AllowHTTPSInbound",
                            "properties": {
                              "protocol": "Tcp",
                              "sourcePortRange": "*",
                              "destinationPortRange": "443",
                              "sourceAddressPrefix": "Internet",
                              "destinationAddressPrefix": "*",
                              "access": "Allow",
                              "priority": 120,
                              "direction": "Inbound"
                            }
                          },
                          {
                            "name": "AllowGatewayManagerInbound",
                            "properties": {
                              "protocol": "Tcp",
                              "sourcePortRange": "*",
                              "destinationPortRange": "443",
                              "sourceAddressPrefix": "GatewayManager",
                              "destinationAddressPrefix": "*",
                              "access": "Allow",
                              "priority": 130,
                              "direction": "Inbound"
                            }
                          },
                          {
                            "name": "AllowAzureLoadBalancerInbound",
                            "properties": {
                              "protocol": "Tcp",
                              "sourcePortRange": "*",
                              "destinationPortRange": "443",
                              "sourceAddressPrefix": "AzureLoadBalancer",
                              "destinationAddressPrefix": "*",
                              "access": "Allow",
                              "priority": 140,
                              "direction": "Inbound"
                            }
                          },
                          {
                            "name": "AllowBastionHostCommunication",
                            "properties": {
                              "protocol": "*",
                              "sourcePortRange": "*",
                              "destinationPortRanges": [
                                "8080",
                                "7501"
                              ],
                              "sourceAddressPrefix": "VirtualNetwork",
                              "destinationAddressPrefix": "VirtualNetwork",
                              "access": "Allow",
                              "priority": 150,
                              "direction": "Inbound"
                            }
                          },
                          {
                            "name": "AllowSshRdpOutbound",
                            "properties": {
                              "protocol": "*",
                              "sourcePortRange": "*",
                              "destinationPortRanges": [
                                "22",
                                "3389"
                              ],
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "VirtualNetwork",
                              "access": "Allow",
                              "priority": 100,
                              "direction": "Outbound"
                            }
                          },
                          {
                            "name": "AllowAzureCloudOutbound",
                            "properties": {
                              "protocol": "Tcp",
                              "sourcePortRange": "*",
                              "destinationPortRange": "443",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "AzureCloud",
                              "access": "Allow",
                              "priority": 110,
                              "direction": "Outbound"
                            }
                          },
                          {
                            "name": "AllowBastionCommunication",
                            "properties": {
                              "protocol": "*",
                              "sourcePortRange": "*",
                              "destinationPortRanges": [
                                "8080",
                                "5701"
                              ],
                              "sourceAddressPrefix": "VirtualNetwork",
                              "destinationAddressPrefix": "VirtualNetwork",
                              "access": "Allow",
                              "priority": 120,
                              "direction": "Outbound"
                            }
                          },
                          {
                            "name": "AllowGetSessionInformation",
                            "properties": {
                              "protocol": "*",
                              "sourcePortRange": "*",
                              "destinationPortRange": "80",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "Internet",
                              "access": "Allow",
                              "priority": 130,
                              "direction": "Outbound"
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "outputs": {
                    "bastionNsgId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-bastion-{0}', parameters('suffix')))]"
                    },
                    "vmNsgId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-vm-{0}', parameters('suffix')))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "vnet-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnet_name": {
                    "value": "[format('vnet-{0}', variables('suffix'))]"
                  },
                  "vnet_address_space": {
                    "value": "[parameters('vnet_address_space')]"
                  },
                  "vnet_location": {
                    "value": "[parameters('location')]"
                  },
                  "snet_agw_name": {
                    "value": "[format('snet-agw-{0}', variables('suffix'))]"
                  },
                  "snet_agw_address_prefix": {
                    "value": "[parameters('snet_agw_address_prefix')]"
                  },
                  "snet_cosmosdb_name": {
                    "value": "[format('snet-cosmosdb-{0}', variables('suffix'))]"
                  },
                  "snet_cosmosdb_address_prefix": {
                    "value": "[parameters('snet_cosmosdb_address_prefix')]"
                  },
                  "snet_aks_name": {
                    "value": "[format('snet-aks-{0}', variables('suffix'))]"
                  },
                  "snet_aks_address_prefix": {
                    "value": "[parameters('snet_aks_address_prefix')]"
                  },
                  "snet_shared_name": {
                    "value": "[format('snet-shared-{0}', variables('suffix'))]"
                  },
                  "snet_shared_address_prefix": {
                    "value": "[parameters('snet_shared_address_prefix')]"
                  },
                  "snet_bastion_name": {
                    "value": "AzureBastionSubnet"
                  },
                  "snet_bastion_address_prefix": {
                    "value": "[parameters('snet_bastion_address_prefix')]"
                  },
                  "nsgBastionId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'nsg-deployment'), '2022-09-01').outputs.bastionNsgId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.19.5.34762",
                      "templateHash": "2224712456436947025"
                    }
                  },
                  "parameters": {
                    "vnet_name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the virtual network"
                      }
                    },
                    "vnet_location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location of the virtual network"
                      }
                    },
                    "vnet_address_space": {
                      "type": "array",
                      "metadata": {
                        "description": "Address space of the virtual network"
                      }
                    },
                    "snet_shared_name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the subnet where the private endpoints will reside"
                      }
                    },
                    "snet_shared_address_prefix": {
                      "type": "string",
                      "metadata": {
                        "description": "Address space of the subnet where the private endpoints will reside"
                      }
                    },
                    "snet_bastion_name": {
                      "type": "string",
                      "defaultValue": "AzureBastionSubnet",
                      "metadata": {
                        "description": "Name of the subnet where the Bastion host will reside"
                      }
                    },
                    "snet_bastion_address_prefix": {
                      "type": "string",
                      "metadata": {
                        "description": "Address space of the subnet where the Bastion host will reside"
                      }
                    },
                    "nsgBastionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Id of Bastion`s nsg"
                      }
                    },
                    "snet_cosmosdb_name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the subnet where the CosmosDB server integration will take place"
                      }
                    },
                    "snet_cosmosdb_address_prefix": {
                      "type": "string",
                      "metadata": {
                        "description": "Address space of the subnet where the CosmosDB server integration will take place"
                      }
                    },
                    "snet_agw_name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the subnet where the AGW will reside"
                      }
                    },
                    "snet_agw_address_prefix": {
                      "type": "string",
                      "metadata": {
                        "description": "Address space of the subnet where the AGW will reside"
                      }
                    },
                    "snet_aks_name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the subnet where the AKS will reside"
                      }
                    },
                    "snet_aks_address_prefix": {
                      "type": "string",
                      "metadata": {
                        "description": "Address space of the subnet where the AKS will reside"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2019-11-01",
                      "name": "[parameters('vnet_name')]",
                      "location": "[parameters('vnet_location')]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": "[parameters('vnet_address_space')]"
                        },
                        "subnets": [
                          {
                            "name": "[parameters('snet_shared_name')]",
                            "properties": {
                              "addressPrefix": "[parameters('snet_shared_address_prefix')]"
                            }
                          },
                          {
                            "name": "[parameters('snet_aks_name')]",
                            "properties": {
                              "addressPrefix": "[parameters('snet_aks_address_prefix')]",
                              "privateEndpointNetworkPolicies": "Disabled",
                              "privateLinkServiceNetworkPolicies": "Disabled",
                              "serviceEndpoints": [
                                {
                                  "service": "Microsoft.ContainerRegistry"
                                }
                              ]
                            }
                          },
                          {
                            "name": "[parameters('snet_agw_name')]",
                            "properties": {
                              "addressPrefix": "[parameters('snet_agw_address_prefix')]",
                              "privateEndpointNetworkPolicies": "Disabled",
                              "privateLinkServiceNetworkPolicies": "Disabled"
                            }
                          },
                          {
                            "name": "[parameters('snet_cosmosdb_name')]",
                            "properties": {
                              "addressPrefix": "[parameters('snet_cosmosdb_address_prefix')]",
                              "privateEndpointNetworkPolicies": "Disabled"
                            }
                          },
                          {
                            "name": "[parameters('snet_bastion_name')]",
                            "properties": {
                              "addressPrefix": "[parameters('snet_bastion_address_prefix')]",
                              "privateEndpointNetworkPolicies": "Disabled",
                              "privateLinkServiceNetworkPolicies": "Disabled",
                              "networkSecurityGroup": {
                                "id": "[parameters('nsgBastionId')]"
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "outputs": {
                    "vnet_id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnet_name'))]"
                    },
                    "snet_shared_id": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnet_name')), '2019-11-01').subnets[0].id]"
                    },
                    "snet_aks_id": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnet_name')), '2019-11-01').subnets[1].id]"
                    },
                    "snet_agw_id": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnet_name')), '2019-11-01').subnets[2].id]"
                    },
                    "snet_cosmosdb_id": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnet_name')), '2019-11-01').subnets[3].id]"
                    },
                    "snet_bastion_id": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnet_name')), '2019-11-01').subnets[4].id]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'nsg-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('kv-{0}-deployment', parameters('workload'))]",
              "resourceGroup": "[parameters('rg_name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('kv_name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "sku_name": {
                    "value": "standard"
                  },
                  "soft_delete_enabled": {
                    "value": true
                  },
                  "purge_protection_enabled": {
                    "value": true
                  },
                  "enabled_for_template_deployment": {
                    "value": true
                  },
                  "enable_rbac_authorization": {
                    "value": false
                  },
                  "jumpbox_admin_password_secret_name": {
                    "value": "[parameters('jumpbox_admin_password_secret_name')]"
                  },
                  "jumpbox_admin_password_secret_value": {
                    "value": "[parameters('jumpbox_admin_password')]"
                  },
                  "cosmosdb_admin_password_secret_name": {
                    "value": "[parameters('cosmosdb_admin_password_secret_name')]"
                  },
                  "cosmosdb_admin_password_secret_value": {
                    "value": "[parameters('cosmosdb_admin_password')]"
                  },
                  "pep_name": {
                    "value": "[format('pep-kv-{0}', variables('suffix'))]"
                  },
                  "pep_location": {
                    "value": "[parameters('location')]"
                  },
                  "pep_subnet_id": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.snet_shared_id.value]"
                  },
                  "vnet_id": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.vnet_id.value]"
                  },
                  "workspace_id": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('log-{0}-deployment', parameters('workload'))), '2022-09-01').outputs.log_workspace_id.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.19.5.34762",
                      "templateHash": "42319776262785985"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the key vault"
                      },
                      "maxLength": 24,
                      "minLength": 3
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location of the key vault"
                      }
                    },
                    "sku_name": {
                      "type": "string",
                      "metadata": {
                        "description": "SKU name of the key vault"
                      },
                      "allowedValues": [
                        "premium",
                        "standard"
                      ]
                    },
                    "enabled_for_template_deployment": {
                      "type": "bool",
                      "metadata": {
                        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from this key vault"
                      }
                    },
                    "purge_protection_enabled": {
                      "type": "bool",
                      "metadata": {
                        "description": "Specifies whether Purge Protection is enabled for this key vault"
                      }
                    },
                    "soft_delete_enabled": {
                      "type": "bool",
                      "metadata": {
                        "description": "Property to specify whether the soft delete functionality is enabled for this key vault"
                      }
                    },
                    "vnet_id": {
                      "type": "string",
                      "metadata": {
                        "description": "ID of the virtual network to which the private dns zone will be linked"
                      }
                    },
                    "pep_name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the key vault private endpoint"
                      }
                    },
                    "pep_location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location of the key vault private endpoint"
                      }
                    },
                    "pep_subnet_id": {
                      "type": "string",
                      "metadata": {
                        "description": "ID of the subnet where the private endpoint will reside"
                      }
                    },
                    "jumpbox_admin_password_secret_value": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Password of jumpbox admin"
                      }
                    },
                    "jumpbox_admin_password_secret_name": {
                      "type": "string",
                      "metadata": {
                        "description": "Secret name for password of jumpbox admin"
                      }
                    },
                    "cosmosdb_admin_password_secret_value": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Password of cosmosdb admin"
                      }
                    },
                    "cosmosdb_admin_password_secret_name": {
                      "type": "string",
                      "metadata": {
                        "description": "Secret name for password of cosmosdb admin"
                      }
                    },
                    "workspace_id": {
                      "type": "string",
                      "metadata": {
                        "description": "ID of Log Analytics Workspace to enable audit log"
                      }
                    },
                    "enable_rbac_authorization": {
                      "type": "bool",
                      "metadata": {
                        "description": "RBAC authentication to access Key Vault"
                      }
                    }
                  },
                  "variables": {
                    "private_dns_zone_name": "privatelink.vaultcore.azure.net"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "sku": {
                          "family": "A",
                          "name": "[parameters('sku_name')]"
                        },
                        "tenantId": "[subscription().tenantId]",
                        "enableRbacAuthorization": "[parameters('enable_rbac_authorization')]",
                        "enabledForTemplateDeployment": "[parameters('enabled_for_template_deployment')]",
                        "enablePurgeProtection": "[parameters('purge_protection_enabled')]",
                        "enableSoftDelete": "[parameters('soft_delete_enabled')]",
                        "networkAcls": {
                          "bypass": "[if(parameters('enabled_for_template_deployment'), 'AzureServices', 'None')]",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": []
                        },
                        "accessPolicies": []
                      }
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('jumpbox_admin_password_secret_name'))]",
                      "properties": {
                        "value": "[parameters('jumpbox_admin_password_secret_value')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('cosmosdb_admin_password_secret_name'))]",
                      "properties": {
                        "value": "[parameters('cosmosdb_admin_password_secret_value')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('private_dns_zone_name')]",
                      "location": "global"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', variables('private_dns_zone_name'), format('private-dns-vnet-link-{0}', parameters('name')))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('vnet_id')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('private_dns_zone_name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2022-01-01",
                      "name": "[parameters('pep_name')]",
                      "location": "[parameters('pep_location')]",
                      "properties": {
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('pep_name')]",
                            "properties": {
                              "groupIds": [
                                "vault"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('pep_subnet_id')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2022-01-01",
                      "name": "[format('{0}/{1}', parameters('pep_name'), 'vault-private-dns-zone-group')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "vault-private-dns-zone-config",
                            "properties": {
                              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('private_dns_zone_name'))]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('pep_name'))]",
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('private_dns_zone_name'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('log-{0}-deployment', parameters('workload')))]",
                "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('jumpbox-{0}-deployment', parameters('workload'))]",
              "resourceGroup": "[parameters('rg_name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('naming').virtualMachine.name]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "availability_zones": {
                    "value": [
                      "1"
                    ]
                  },
                  "size": {
                    "value": "Standard_D2_v2"
                  },
                  "extensionName": {
                    "value": "setup-agent-extension"
                  },
                  "admin_username": {
                    "value": "[parameters('jumpbox_admin_username')]"
                  },
                  "admin_password": {
                    "reference": {
                      "keyVault": {
                        "id": "[resourceId('Microsoft.KeyVault/vaults', variables('kv_name'))]"
                      },
                      "secretName": "[parameters('jumpbox_admin_password_secret_name')]"
                    }
                  },
                  "image_publisher": {
                    "value": "Canonical"
                  },
                  "image_offer": {
                    "value": "UbuntuServer"
                  },
                  "image_sku": {
                    "value": "18.04-LTS"
                  },
                  "image_version": {
                    "value": "latest"
                  },
                  "nic_name": {
                    "value": "nic-vm-jumpbox"
                  },
                  "nic_location": {
                    "value": "[parameters('location')]"
                  },
                  "jumpbox_subnet_id": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.snet_shared_id.value]"
                  },
                  "scriptName": {
                    "value": "install-agent.sh"
                  },
                  "scriptUrl": {
                    "value": "https://raw.githubusercontent.com/diamadiskon/Scripts/main/install-agent.sh"
                  },
                  "nsgVmId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'nsg-deployment'), '2022-09-01').outputs.vmNsgId.value]"
                  },
                  "AzureDevOpsPAT": {
                    "value": "[parameters('azurePAT')]"
                  },
                  "AzureDevOpsURL": {
                    "value": "[parameters('AzureDevOpsURL')]"
                  },
                  "AgentPoolName": {
                    "value": "[parameters('AgentPoolName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.19.5.34762",
                      "templateHash": "4635270090215126491"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the vm"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location of the vm"
                      }
                    },
                    "availability_zones": {
                      "type": "array",
                      "metadata": {
                        "description": "Availability Zone for vm redundancy"
                      }
                    },
                    "extensionName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of VM extension"
                      }
                    },
                    "size": {
                      "type": "string",
                      "metadata": {
                        "description": "Size of the vm"
                      }
                    },
                    "image_publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Publisher of the image"
                      }
                    },
                    "image_offer": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the offer of the platform image or marketplace image used to create the vm"
                      }
                    },
                    "image_sku": {
                      "type": "string",
                      "metadata": {
                        "description": "SKU of the image"
                      }
                    },
                    "image_version": {
                      "type": "string",
                      "defaultValue": "latest",
                      "metadata": {
                        "description": "Specifies the version of the platform image or marketplace image used to create the vm"
                      }
                    },
                    "admin_username": {
                      "type": "string",
                      "metadata": {
                        "description": "Username for vm admin"
                      }
                    },
                    "admin_password": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Password for vm admin"
                      }
                    },
                    "nic_name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the vm nic"
                      }
                    },
                    "nic_location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location of the vm nic"
                      }
                    },
                    "jumpbox_subnet_id": {
                      "type": "string",
                      "metadata": {
                        "description": "ID of the jumpbox subnet"
                      }
                    },
                    "scriptUrl": {
                      "type": "string",
                      "metadata": {
                        "description": "Url of the public script for custom script extension"
                      }
                    },
                    "scriptName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the script for custom script extension"
                      }
                    },
                    "nsgVmId": {
                      "type": "string",
                      "metadata": {
                        "description": "Nsg of vm"
                      }
                    },
                    "AgentPoolName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of agent pool"
                      }
                    },
                    "AzureDevOpsURL": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Devops Url"
                      }
                    },
                    "AzureDevOpsPAT": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Azure DevOps PAT"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "IyEvYmluL2Jhc2gKc3VkbyBhcHQtZ2V0IHVwZGF0ZSAteQpzdWRvIGFwdC1nZXQgaW5zdGFsbCAteSBhcHQtdHJhbnNwb3J0LWh0dHBzIGNhLWNlcnRpZmljYXRlcyBjdXJsIGxzYi1yZWxlYXNlIGdudXBnLWFnZW50IHNvZnR3YXJlLXByb3BlcnRpZXMtY29tbW9uIG15c3FsLWNsaWVudApjdXJsIC1mc1NMIGh0dHBzOi8vZ2V0LmRvY2tlci5jb20gLW8gZ2V0LWRvY2tlci5zaCAmJiBzdWRvIGNobW9kICt4IGdldC1kb2NrZXIuc2ggJiYgLi9nZXQtZG9ja2VyLnNoCmN1cmwgLXNMIGh0dHBzOi8vcGFja2FnZXMubWljcm9zb2Z0LmNvbS9rZXlzL21pY3Jvc29mdC5hc2MgfCBncGcgLS1kZWFybW9yIHwgc3VkbyB0ZWUgL2V0Yy9hcHQvdHJ1c3RlZC5ncGcuZC9taWNyb3NvZnQuZ3BnID4gL2Rldi9udWxsCkFaX1JFUE89JChsc2JfcmVsZWFzZSAtY3MpCmVjaG8gImRlYiBbYXJjaD1hbWQ2NF0gaHR0cHM6Ly9wYWNrYWdlcy5taWNyb3NvZnQuY29tL3JlcG9zL2F6dXJlLWNsaS8gJEFaX1JFUE8gbWFpbiIgfCBzdWRvIHRlZSAvZXRjL2FwdC9zb3VyY2VzLmxpc3QuZC9henVyZS1jbGkubGlzdApzdWRvIGFwdC1nZXQgdXBkYXRlIC15CnN1ZG8gYXB0LWdldCBpbnN0YWxsIGF6dXJlLWNsaSAteQpzdWRvIGF6IGFrcyBpbnN0YWxsLWNsaQpjdXJsIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9oZWxtL2hlbG0vbWFpbi9zY3JpcHRzL2dldC1oZWxtLTMgfCBiYXNoCmdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vZGlhbWFkaXNrb24vZGtfZmFzdF9yZWFjdF9wcm9wZWwuZ2l0CiMgYXogbG9naW4gLS1pZGVudGl0eQojIGF6IGFrcyBnZXQtY3JlZGVudGlhbHMgLS1yZXNvdXJjZS1ncm91cCAncmctZmFzdC1yZWFjdC1kZXYtd2V1JyAtLW5hbWUgJ2Frcy1mYXN0LXJlYWN0LWRldi13ZXUnIC0tb3ZlcndyaXRlLWV4aXN0aW5nCiMgc3VkbyBjdXJsIC1TTCBodHRwczovL2dpdGh1Yi5jb20vZG9ja2VyL2NvbXBvc2UvcmVsZWFzZXMvZG93bmxvYWQvdjIuMjMuMy9kb2NrZXItY29tcG9zZS1saW51eC14ODZfNjQgLW8gL3Vzci9sb2NhbC9iaW4vZG9ja2VyLWNvbXBvc2UKIyBheiBhY3IgbG9naW4gLS1uYW1lIGFjcmZhc3RyZWFjdGRldndldWgyd3cyCiMgc3VkbyBkb2NrZXItY29tcG9zZSBidWlsZAojIHN1ZG8gZG9ja2VyIHRhZyBmdWxsc3RhY2stcmVhY3QtZmFzdGFwaS1wcm9wZWwtYmFja2VuZCBhY3JmYXN0cmVhY3RkZXZ3ZXVoMnd3Mi5henVyZWNyLmlvL2FwcC9iYWNrZW5kCiMgc3VkbyBkb2NrZXIgdGFnIGZ1bGxzdGFjay1yZWFjdC1mYXN0YXBpLXByb3BlbC1mcm9udGVuZCBhY3JmYXN0cmVhY3RkZXZ3ZXVoMnd3Mi5henVyZWNyLmlvL2FwcC9mcm9udGVuZAojIHN1ZG8gZG9ja2VyIHB1c2ggYWNyZmFzdHJlYWN0ZGV2d2V1aDJ3dzIuYXp1cmVjci5pby9hcHAvYmFja2VuZAojIHN1ZG8gZG9ja2VyIHB1c2ggYWNyZmFzdHJlYWN0ZGV2d2V1aDJ3dzIuYXp1cmVjci5pby9hcHAvZnJvbnRlbmQKIyBheiBha3MgdXBkYXRlIC1uICdha3MtZmFzdC1yZWFjdC1kZXYtd2V1JyAtZyAncmctZmFzdC1yZWFjdC1kZXYtd2V1JyAtLWF0dGFjaC1hY3IgJ2FjcmZhc3RyZWFjdGRldndldWgyd3cyJwojIGt1YmVjdGwgY3JlYXRlIG5hbWVzcGFjZSBpbmdyZXNzLWJhc2ljIAojIEFkZCB0aGUgb2ZmaWNpYWwgc3RhYmxlIHJlcG9zaXRvcnkKIyBoZWxtIHJlcG8gYWRkIGluZ3Jlc3MtbmdpbnggaHR0cHM6Ly9rdWJlcm5ldGVzLmdpdGh1Yi5pby9pbmdyZXNzLW5naW54CiMgaGVsbSByZXBvIGFkZCBzdGFibGUgaHR0cHM6Ly9rdWJlcm5ldGVzLWNoYXJ0cy5zdG9yYWdlLmdvb2dsZWFwaXMuY29tLwojIGhlbG0gcmVwbyB1cGRhdGUKCiMgIyAgQ3VzdG9taXppbmcgdGhlIENoYXJ0IEJlZm9yZSBJbnN0YWxsaW5nLiAKIyBoZWxtIHNob3cgdmFsdWVzIGluZ3Jlc3MtbmdpbngvaW5ncmVzcy1uZ2lueAoKIyAjIFVzZSBIZWxtIHRvIGRlcGxveSBhbiBOR0lOWCBpbmdyZXNzIGNvbnRyb2xsZXIKIyBoZWxtIGluc3RhbGwgaW5ncmVzcy1uZ2lueCBpbmdyZXNzLW5naW54L2luZ3Jlc3MtbmdpbnggXAojICAgICAtLW5hbWVzcGFjZSBpbmdyZXNzLWJhc2ljIFwKIyAgICAgLS1zZXQgY29udHJvbGxlci5yZXBsaWNhQ291bnQ9MiBcCiMgICAgIC0tc2V0IGNvbnRyb2xsZXIubm9kZVNlbGVjdG9yLiJiZXRhXC5rdWJlcm5ldGVzXC5pby9vcyI9bGludXggXAojICAgICAtLXNldCBkZWZhdWx0QmFja2VuZC5ub2RlU2VsZWN0b3IuImJldGFcLmt1YmVybmV0ZXNcLmlvL29zIj1saW51eCBcCiMgICAgIC0tc2V0IGNvbnRyb2xsZXIuc2VydmljZS5leHRlcm5hbFRyYWZmaWNQb2xpY3k9TG9jYWwgXAojICAgICAtLXNldCBjb250cm9sbGVyLnNlcnZpY2UubG9hZEJhbGFuY2VySVA9IlJFUExBQ0VfU1RBVElDX0lQIiAKCgoKaGVsbSBpbnN0YWxsIGluZ3Jlc3MtbmdpbnggaW5ncmVzcy1uZ2lueC9pbmdyZXNzLW5naW54IFwKICAgIC0tbmFtZXNwYWNlIGFwcCBcCiAgICAtLXNldCBjb250cm9sbGVyLnJlcGxpY2FDb3VudD0yIFwKICAgIC0tc2V0IGNvbnRyb2xsZXIubm9kZVNlbGVjdG9yLiJiZXRhXC5rdWJlcm5ldGVzXC5pby9vcyI9bGludXggXAogICAgLS1zZXQgZGVmYXVsdEJhY2tlbmQubm9kZVNlbGVjdG9yLiJiZXRhXC5rdWJlcm5ldGVzXC5pby9vcyI9bGludXggXAogICAgLS1zZXQgY29udHJvbGxlci5zZXJ2aWNlLmV4dGVybmFsVHJhZmZpY1BvbGljeT1Mb2NhbCBcCiAgICAtLXNldCBjb250cm9sbGVyLnNlcnZpY2UubG9hZEJhbGFuY2VySVA9IjIwLjE2LjExOC4yMjYi"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2022-01-01",
                      "name": "[parameters('nic_name')]",
                      "location": "[parameters('nic_location')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "nic-vm-ip-configuration",
                            "properties": {
                              "subnet": {
                                "id": "[parameters('jumpbox_subnet_id')]"
                              },
                              "privateIPAllocationMethod": "Dynamic"
                            }
                          }
                        ],
                        "networkSecurityGroup": {
                          "id": "[parameters('nsgVmId')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "zones": "[parameters('availability_zones')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('size')]"
                        },
                        "storageProfile": {
                          "osDisk": {
                            "osType": "Linux",
                            "name": "[format('{0}_OsDisk_1', parameters('name'))]",
                            "createOption": "FromImage",
                            "caching": "ReadWrite",
                            "managedDisk": {
                              "storageAccountType": "Standard_LRS"
                            },
                            "deleteOption": "Delete",
                            "diskSizeGB": 100
                          },
                          "dataDisks": [],
                          "imageReference": {
                            "publisher": "[parameters('image_publisher')]",
                            "offer": "[parameters('image_offer')]",
                            "sku": "[parameters('image_sku')]",
                            "version": "[parameters('image_version')]"
                          }
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('nic_name'))]"
                            }
                          ]
                        },
                        "osProfile": {
                          "computerName": "[parameters('name')]",
                          "adminUsername": "[parameters('admin_username')]",
                          "adminPassword": "[parameters('admin_password')]",
                          "linuxConfiguration": {
                            "disablePasswordAuthentication": false,
                            "provisionVMAgent": true,
                            "patchSettings": {
                              "patchMode": "ImageDefault",
                              "assessmentMode": "ImageDefault"
                            }
                          },
                          "customData": "[variables('$fxv#0')]"
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": true
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('nic_name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-08-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'agentDocker')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Extensions",
                        "type": "DockerExtension",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "vm_id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                    },
                    "vm_identity_principal_id": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-03-01', 'full').identity.principalId]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rg_name')), 'Microsoft.Resources/deployments', format('kv-{0}-deployment', parameters('workload')))]",
                "[resourceId('Microsoft.Resources/deployments', 'nsg-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('contributor-role-assignment-{0}-deployment', parameters('workload'))]",
              "resourceGroup": "[parameters('rg_name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "built_in_role_type": {
                    "value": "Contributor"
                  },
                  "principal_id": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rg_name')), 'Microsoft.Resources/deployments', format('jumpbox-{0}-deployment', parameters('workload'))), '2022-09-01').outputs.vm_identity_principal_id.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.19.5.34762",
                      "templateHash": "450868095741929934"
                    }
                  },
                  "parameters": {
                    "principal_id": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the Principal (User, Group or Service Principal) to assign the Role Definition to"
                      }
                    },
                    "built_in_role_type": {
                      "type": "string",
                      "metadata": {
                        "description": "Built-in role to assign"
                      },
                      "allowedValues": [
                        "Owner",
                        "Contributor",
                        "Reader",
                        "AcrPush",
                        "AcrPull",
                        "NetworkContributor"
                      ]
                    }
                  },
                  "variables": {
                    "role": {
                      "Owner": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635', subscription().subscriptionId)]",
                      "Contributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]",
                      "Reader": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7', subscription().subscriptionId)]",
                      "NetworkContributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7', subscription().subscriptionId)]",
                      "AcrPush": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/8311e382-0749-4cb8-b61a-304f252e45ec', subscription().subscriptionId)]",
                      "AcrPull": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d', subscription().subscriptionId)]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(subscription().id, parameters('principal_id'), variables('role')[parameters('built_in_role_type')])]",
                      "properties": {
                        "principalId": "[parameters('principal_id')]",
                        "roleDefinitionId": "[variables('role')[parameters('built_in_role_type')]]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rg_name')), 'Microsoft.Resources/deployments', format('jumpbox-{0}-deployment', parameters('workload')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('bastion-{0}-deployment', parameters('workload'))]",
              "resourceGroup": "[parameters('rg_name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('naming').bastionHost.name]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "sku": {
                    "value": "Standard"
                  },
                  "pip_name": {
                    "value": "[format('pip-bas-{0}', variables('suffix'))]"
                  },
                  "pip_location": {
                    "value": "[parameters('location')]"
                  },
                  "pip_sku_name": {
                    "value": "Standard"
                  },
                  "pip_allocation_method": {
                    "value": "Static"
                  },
                  "subnet_id": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.snet_bastion_id.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.19.5.34762",
                      "templateHash": "7940578634879883813"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Bastion host"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location of the Bastion host"
                      }
                    },
                    "sku": {
                      "type": "string",
                      "metadata": {
                        "description": "SKU of the Bastion host"
                      },
                      "allowedValues": [
                        "Basic",
                        "Standard"
                      ]
                    },
                    "subnet_id": {
                      "type": "string",
                      "metadata": {
                        "description": "ID of the Bastions subnet"
                      }
                    },
                    "pip_name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of Bastions public ip"
                      }
                    },
                    "pip_location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location of Bastions public ip"
                      }
                    },
                    "pip_sku_name": {
                      "type": "string",
                      "metadata": {
                        "description": "SKU name of Bastions public ip"
                      },
                      "allowedValues": [
                        "Basic",
                        "Standard"
                      ]
                    },
                    "pip_allocation_method": {
                      "type": "string",
                      "metadata": {
                        "description": "SKU of Bastions public ip"
                      },
                      "allowedValues": [
                        "Static",
                        "Dynamic"
                      ]
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-03-01",
                      "name": "[parameters('pip_name')]",
                      "location": "[parameters('pip_location')]",
                      "tags": {
                        "resource-usage": "azure-bastion"
                      },
                      "sku": {
                        "name": "[parameters('pip_sku_name')]"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "[parameters('pip_allocation_method')]"
                      }
                    },
                    {
                      "type": "Microsoft.Network/bastionHosts",
                      "apiVersion": "2022-01-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "bastion-ip-configuration",
                            "properties": {
                              "subnet": {
                                "id": "[parameters('subnet_id')]"
                              },
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('pip_name'))]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('pip_name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "bastion_id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/bastionHosts', parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('cr-{0}-deployment', parameters('workload'))]",
              "resourceGroup": "[parameters('rg_name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('naming').containerRegistry.nameUnique]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "sku": {
                    "value": "Premium"
                  },
                  "policy_status": {
                    "value": "enabled"
                  },
                  "policy_type": {
                    "value": "Notary"
                  },
                  "admin_enabled": {
                    "value": false
                  },
                  "public_network_access": {
                    "value": "Disabled"
                  },
                  "zone_redundancy": {
                    "value": "Disabled"
                  },
                  "pep_name": {
                    "value": "[format('pep-cr-{0}', variables('suffix'))]"
                  },
                  "pep_location": {
                    "value": "[parameters('location')]"
                  },
                  "acr_pep_subnet_id": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.snet_shared_id.value]"
                  },
                  "vnet_id": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.vnet_id.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.19.5.34762",
                      "templateHash": "14683840688515634443"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the container registry"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location of the container registry"
                      }
                    },
                    "sku": {
                      "type": "string",
                      "metadata": {
                        "description": "SKU of the container registry"
                      },
                      "allowedValues": [
                        "Premium",
                        "Standard"
                      ]
                    },
                    "admin_enabled": {
                      "type": "bool",
                      "metadata": {
                        "description": "Specifies whether the admin user is enabled"
                      }
                    },
                    "public_network_access": {
                      "type": "string",
                      "metadata": {
                        "description": "Property to specify whether the registry will accept traffic from public internet"
                      },
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ]
                    },
                    "zone_redundancy": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies whether or not zone redundancy is enabled for this container registry"
                      },
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ]
                    },
                    "vnet_id": {
                      "type": "string",
                      "metadata": {
                        "description": "ID of the virtual network to which the private dns zone will be linked"
                      }
                    },
                    "pep_name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the container registry private endpoint"
                      }
                    },
                    "pep_location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location of the container registry private endpoint"
                      }
                    },
                    "acr_pep_subnet_id": {
                      "type": "string",
                      "metadata": {
                        "description": "ID of the subnet where the private endpoint will reside"
                      }
                    },
                    "policy_status": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies Trusted Content Images policy status"
                      }
                    },
                    "policy_type": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies Trusted Content Images policy type"
                      }
                    }
                  },
                  "variables": {
                    "name_cleaned": "[replace(parameters('name'), '-', '')]",
                    "private_dns_zone_name": "privatelink.azurecr.io"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2022-02-01-preview",
                      "name": "[variables('name_cleaned')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "properties": {
                        "policies": {
                          "trustPolicy": {
                            "status": "[parameters('policy_status')]",
                            "type": "[parameters('policy_type')]"
                          }
                        },
                        "adminUserEnabled": "[parameters('admin_enabled')]",
                        "publicNetworkAccess": "[parameters('public_network_access')]",
                        "zoneRedundancy": "[parameters('zone_redundancy')]"
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('private_dns_zone_name')]",
                      "location": "global"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', variables('private_dns_zone_name'), format('private-dns-vnet-link-{0}', parameters('name')))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('vnet_id')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('private_dns_zone_name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2022-01-01",
                      "name": "[parameters('pep_name')]",
                      "location": "[parameters('pep_location')]",
                      "properties": {
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('pep_name')]",
                            "properties": {
                              "groupIds": [
                                "registry"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', variables('name_cleaned'))]"
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('acr_pep_subnet_id')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', variables('name_cleaned'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2022-01-01",
                      "name": "[format('{0}/{1}', parameters('pep_name'), 'registry-private-dns-zone-group')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "registry-private-dns-zone-config",
                            "properties": {
                              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('private_dns_zone_name'))]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('pep_name'))]",
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('private_dns_zone_name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "registry_id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ContainerRegistry/registries', variables('name_cleaned'))]"
                    },
                    "registry_name": {
                      "type": "string",
                      "value": "[variables('name_cleaned')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('asp-{0}-deployment', parameters('workload'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('naming').appServicePlan.name]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "kind": {
                    "value": "linux"
                  },
                  "reserved": {
                    "value": true
                  },
                  "sku_name": {
                    "value": "P1v2"
                  },
                  "sku_tier": {
                    "value": "Premium"
                  },
                  "zone_redundant": {
                    "value": false
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.19.5.34762",
                      "templateHash": "7155382060829531696"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the App Service Plan"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location of the App Service Plan"
                      }
                    },
                    "sku_name": {
                      "type": "string",
                      "metadata": {
                        "description": "SKU name of the App Service Plan"
                      }
                    },
                    "sku_tier": {
                      "type": "string",
                      "metadata": {
                        "description": "SKU tier of the App Service Plan"
                      },
                      "allowedValues": [
                        "Basic",
                        "Standard",
                        "Premium",
                        "Isolated"
                      ]
                    },
                    "kind": {
                      "type": "string",
                      "metadata": {
                        "description": "Kind of the App Service Plan"
                      }
                    },
                    "zone_redundant": {
                      "type": "bool",
                      "metadata": {
                        "description": "Specifies whether the App Service Plan will perform availability zone balancing"
                      }
                    },
                    "reserved": {
                      "type": "bool",
                      "metadata": {
                        "description": "Specifies whether the App Service Plan will be Linux (true) or Windows (false)"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/serverfarms",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('sku_name')]",
                        "tier": "[parameters('sku_tier')]"
                      },
                      "properties": {
                        "reserved": "[parameters('reserved')]",
                        "zoneRedundant": "[parameters('zone_redundant')]"
                      },
                      "kind": "[parameters('kind')]"
                    }
                  ],
                  "outputs": {
                    "app_service_plan_id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('pip-cdf-{0}-deployment', parameters('workload'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('pip-cdf-{0}-we', parameters('workload'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "allocationMethod": {
                    "value": "Static"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.19.5.34762",
                      "templateHash": "10681084703322331824"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "allocationMethod": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publicIPAllocationMethod": "[parameters('allocationMethod')]",
                        "publicIPAddressVersion": "IPv4"
                      },
                      "zones": [
                        "1"
                      ],
                      "sku": {
                        "name": "Standard"
                      }
                    }
                  ],
                  "outputs": {
                    "publicIpOutput": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-05-01').ipAddress]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('log-{0}-deployment', parameters('workload'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspace": {
                    "value": "[parameters('naming').logAnalyticsWorkspace.name]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.19.5.34762",
                      "templateHash": "9865796574416915499"
                    }
                  },
                  "parameters": {
                    "logAnalyticsWorkspace": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-12-01-preview",
                      "name": "[parameters('logAnalyticsWorkspace')]",
                      "location": "[parameters('location')]"
                    }
                  ],
                  "outputs": {
                    "log_workspace_id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspace'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "jump-role-assignment-deployment",
              "resourceGroup": "[parameters('rg_name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "built_in_role_type": {
                    "value": "Owner"
                  },
                  "principal_id": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rg_name')), 'Microsoft.Resources/deployments', format('jumpbox-{0}-deployment', parameters('workload'))), '2022-09-01').outputs.vm_identity_principal_id.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.19.5.34762",
                      "templateHash": "450868095741929934"
                    }
                  },
                  "parameters": {
                    "principal_id": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the Principal (User, Group or Service Principal) to assign the Role Definition to"
                      }
                    },
                    "built_in_role_type": {
                      "type": "string",
                      "metadata": {
                        "description": "Built-in role to assign"
                      },
                      "allowedValues": [
                        "Owner",
                        "Contributor",
                        "Reader",
                        "AcrPush",
                        "AcrPull",
                        "NetworkContributor"
                      ]
                    }
                  },
                  "variables": {
                    "role": {
                      "Owner": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635', subscription().subscriptionId)]",
                      "Contributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]",
                      "Reader": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7', subscription().subscriptionId)]",
                      "NetworkContributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7', subscription().subscriptionId)]",
                      "AcrPush": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/8311e382-0749-4cb8-b61a-304f252e45ec', subscription().subscriptionId)]",
                      "AcrPull": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d', subscription().subscriptionId)]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(subscription().id, parameters('principal_id'), variables('role')[parameters('built_in_role_type')])]",
                      "properties": {
                        "principalId": "[parameters('principal_id')]",
                        "roleDefinitionId": "[variables('role')[parameters('built_in_role_type')]]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rg_name')), 'Microsoft.Resources/deployments', format('jumpbox-{0}-deployment', parameters('workload')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "acrpush-role-assignment-deployment",
              "resourceGroup": "[parameters('rg_name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "built_in_role_type": {
                    "value": "AcrPush"
                  },
                  "principal_id": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rg_name')), 'Microsoft.Resources/deployments', format('jumpbox-{0}-deployment', parameters('workload'))), '2022-09-01').outputs.vm_identity_principal_id.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.19.5.34762",
                      "templateHash": "450868095741929934"
                    }
                  },
                  "parameters": {
                    "principal_id": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the Principal (User, Group or Service Principal) to assign the Role Definition to"
                      }
                    },
                    "built_in_role_type": {
                      "type": "string",
                      "metadata": {
                        "description": "Built-in role to assign"
                      },
                      "allowedValues": [
                        "Owner",
                        "Contributor",
                        "Reader",
                        "AcrPush",
                        "AcrPull",
                        "NetworkContributor"
                      ]
                    }
                  },
                  "variables": {
                    "role": {
                      "Owner": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635', subscription().subscriptionId)]",
                      "Contributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]",
                      "Reader": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7', subscription().subscriptionId)]",
                      "NetworkContributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7', subscription().subscriptionId)]",
                      "AcrPush": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/8311e382-0749-4cb8-b61a-304f252e45ec', subscription().subscriptionId)]",
                      "AcrPull": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d', subscription().subscriptionId)]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(subscription().id, parameters('principal_id'), variables('role')[parameters('built_in_role_type')])]",
                      "properties": {
                        "principalId": "[parameters('principal_id')]",
                        "roleDefinitionId": "[variables('role')[parameters('built_in_role_type')]]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('rg_name')), 'Microsoft.Resources/deployments', format('jumpbox-{0}-deployment', parameters('workload')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rg_name')), 'Microsoft.Resources/deployments', 'azure-naming-deployment')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rg_name'))]"
      ]
    }
  ],
  "outputs": {
    "resource_groups": {
      "type": "array",
      "value": []
    }
  }
}